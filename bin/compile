#!/usr/bin/env bash

# fail fast
set -e

# bin/compile <build-dir> <cache-dir>
build_dir=$1
cache_dir=$2

$build_dir/deploy/kbuild $build_dir $cache_dir

# Expected steps in k.build file
## 1. Install Mono >= 3.4.1 (3.8.0 recommended)
## 2. Install KVM
## 3. Install KRE
## 4. Prepare Procfile
##    Ex: {
##      echo "web: k web" > $build_dir/Procfile
##    }


# kbuild sample usage ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# -----------------------------------------------------------

# 1. Install Mono >= 3.4.1 (3.8.0 recommended)
########## https://github.com/friism/heroku-buildpack-mono/blob/master/bin/compile
DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"
MONO_VERSION="3.12.0"
STACK=""

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "-----> Downloading ${DOWNLOAD_URL}"
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

cd ${build_dir}
mkdir -p ${cache_dir}

MONO_CACHE_LOCATION=${CACHE_DIR}/$STACK/mono-${MONO_VERSION}
#http://s3.amazonaws.com/mono-dependencies/cedar-14/mono-3.10.0.tar.gz
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION}

ls

# Copy mono from cache to where we're building the slug
cp -r "${MONO_CACHE_LOCATION}/mono" .
# Mono expects to be running out of /app
ln -s "$BUILD_DIR/mono" /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

echo "...... PATH:"
echo ${PATH}

echo "...... LD_LIBRARY_PATH:"
echo ${LD_LIBRARY_PATH}

echo "...... MONO VERSION:"
mono --version



# 2. Install KVM
echo Install KVM...

# 3. Install KRE
echo Install KRE...

# 4. Prepare Procfile
#    Ex: {
#      echo "web: k web" > $build_dir/Procfile
#    }
