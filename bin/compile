#!/usr/bin/env bash

# fail fast
set -e

# bin/compile <build-dir> <cache-dir>
build_dir=$1
cache_dir=$2

$build_dir/deploy/kbuild $build_dir $cache_dir

# Expected steps in k.build file
## 1. Install Mono >= 3.4.1 (3.8.0 recommended)
## 2. Install KVM
## 3. Install KRE
## 4. Prepare Procfile
##    Ex: {
##      echo "web: k web" > $build_dir/Procfile
##    }


# kbuild sample usage ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# -----------------------------------------------------------

# 1. Install Mono >= 3.4.1 (3.8.0 recommended)
########## https://github.com/friism/heroku-buildpack-mono/blob/master/bin/compile
DEPENDENCY_S3_BUCKET_PATH="http://s3.amazonaws.com/mono-dependencies"
MONO_VERSION="3.10.0"
STACK="cedar-14"

function conditional_download() {
  DOWNLOAD_URL="$1"
  DESTINATION="$2"

  if [ ! -d ${DESTINATION} ]; then
    rm -rf ${DESTINATION}
    mkdir -p ${DESTINATION}
    echo "-----> Downloading ${DOWNLOAD_URL}"
    curl ${DOWNLOAD_URL} -s | tar xz -C ${DESTINATION}
  fi
}

LP_DIR=`cd $(dirname $0); cd ..; pwd`

echo "-----> LP_DIR:"
echo "       $LP_DIR"

cd ${build_dir}
mkdir -p ${cache_dir}

MONO_CACHE_LOCATION=${cache_dir}/${STACK}/mono-${MONO_VERSION}
#http://s3.amazonaws.com/mono-dependencies/cedar-14/mono-3.10.0.tar.gz
conditional_download ${DEPENDENCY_S3_BUCKET_PATH}/${STACK}/mono-${MONO_VERSION}.tar.gz ${MONO_CACHE_LOCATION}

# Copy mono from cache to where we're building the slug
cp -r "${MONO_CACHE_LOCATION}/mono" .
# Mono expects to be running out of /app
ln -s "$build_dir/mono" /app

export PATH="/app/mono/bin:${PATH}"
export LD_LIBRARY_PATH="/app/mono/lib:${LD_LIBRARY_PATH}"

# Add certs to trust store
#cp -r ${LP_DIR}/.config ~/.
#cp -r ${LP_DIR}/.config ${build_dir}/.

#mkdir -p ${build_dir}/.profile.d
#cp -n ${LP_DIR}/.profile.d/* ${build_dir}/.profile.d/


## TODO ------------------------------------------------------------------------
#remote: -----> Install KVM...
#remote: Downloading kvm as script to '/app/.kre/kvm'
#remote:
#remote: Profile not found. Tried ~/.bash_profile ~/.zshrc and ~/.profile.
#remote: Create one of them and run this script again
#remote:   OR
#remote: Append the following line to the correct file yourself:
#remote:
#remote:  [ -s "/app/.kre/kvm/kvm.sh" ] && . "/app/.kre/kvm/kvm.sh" # Load kvm
#remote:
#remote: Type 'source /app/.kre/kvm/kvm.sh' to start using kvm
## ------------------------------------------------------------------------------



echo "-----> MONO VERSION:"
mono --version

echo "-----> Updating SSL certificates..."
mozroots --import --sync
yes | certmgr -ssl "https://www.myget.org"
yes | certmgr -ssl "https://www.nuget.org"


# 2. Install KVM
echo "-----> Install KVM..."
curl -sSL https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.sh | sh && source ~/.kre/kvm/kvm.sh

# 3. Install KRE
echo "-----> Install KRE..."
kvm upgrade

# 3.1 Restore project packages...
echo "-----> Restore project packages..."
kpm restore

# 4. Prepare Procfile
echo "-----> Procfile..."
echo "       $build_dir/Procfile"

echo "-----> Aguardando release"
echo "web: k web" > $build_dir/Procfile

echo "-----> Procfile CAT..."
cat $build_dir/Procfile